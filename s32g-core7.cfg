#
# Configuration file for NXP S32G family of SoCs
#

if { [info exists CHIPNAME] } {
    set _CHIPNAME $CHIPNAME
} else {
    set _CHIPNAME s32g
}

if { [info exists CHIPCORES] } {
    set _cores $CHIPCORES
} else {
    set _cores 1
}

# CoreSight Debug Access Port
if { [info exists DAP_TAPID] } {
    set _DAP_TAPID $DAP_TAPID
} else {
    set _DAP_TAPID 0x5ba00477
#    set _DAP_TAPID 0x0830101d
}

proc CONST { key } {
    array set constant {
        IDCODE      0x00
        SJC_DPACC   0xfa
        SJC_APACC   0xfb
        SJC_IDCODE  0xfe
        SJC_BYPASS  0xff
    }
    return $constant($key)
}

proc unlock_jtag {} {
    # Define JTAG unlock sequence
    jtag newtap $_CHIPNAME sjc -irlen 8 -ircapture 0x01 -irmask 0xff \
        -expected-id 0x2830101d

    # Bypass the JTAG TAP to avoid side effects
    irscan $_CHIPNAME.sjc [CONST SJC_BYPASS] -endstate RUN/IDLE
    runtest 10

    # Unlock sequence - Adjust based on actual sequence requirements
    irscan $_CHIPNAME.sjc [CONST SJC_IDCODE] -endstate IRPAUSE
    set idcode [drscan $_CHIPNAME.sjc 32 0 -endstate DRPAUSE]
    echo "IDCODE: $idcode"
    runtest 10

    # Define the unlock code in 32-bit chunks
    set unlock_code_chunks [list \
        0xEFC0F2EB 0x399F616B 0xCC50C7E1 0x7AE4E0B3]

    foreach chunk $unlock_code_chunks {
        drscan $_CHIPNAME.sjc 32 $chunk -endstate DRPAUSE
        runtest 10
    }

    # Verify unlock (if necessary) and prepare TAP
    drscan $_CHIPNAME.sjc 32 0 -endstate DRPAUSE
    runtest 10
}

# Execute the unlock sequence
unlock_jtag

# Proceed with standard configuration
scan_chain

# Define the DAP TAP for S32G
jtag newtap $_CHIPNAME sjc -irlen 8 -ircapture 0x01 -irmask 0xff \
        -expected-id 0x2830101d

# Configure to display actual IDCODE
jtag configure $_CHIPNAME.sjc -event setup \
    "moo $_CHIPNAME.sjc"

dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.sjc

set _TARGETNAME $_CHIPNAME.a53
set _CTINAME $_CHIPNAME.cti

set DBGBASE {0x80410000 0x80510000 0x80810000 0x80910000}
set CTIBASE {0x80420000 0x80520000 0x80820000 0x80920000}

set _cores 1
for { set _core 0 } { $_core < $_cores } { incr _core } {
    cti create $_CTINAME.$_core -dap $_CHIPNAME.dap -ap-num 1 \
        -ctibase [lindex $CTIBASE $_core]

    set _command "target create $_TARGETNAME.$_core aarch64 -dap $_CHIPNAME.dap \
        -dbgbase [lindex $DBGBASE $_core] -cti $_CTINAME.$_core"

    if { $_core != 0 } {
        # non-boot core examination may fail
        set _smp_command "$_smp_command $_TARGETNAME.$_core"
    } else {
        set _smp_command "target smp $_TARGETNAME.$_core -defer-examine"
    }

    eval $_command
}

eval $_smp_command

# Declare the auxiliary Cortex-M4 core on AP #4
target create ${_CHIPNAME}.m4 cortex_m -dap ${_CHIPNAME}.dap -ap-num 4 \
               -defer-examine

# AHB-AP for direct access to SOC bus
target create ${_CHIPNAME}.ahb mem_ap -dap ${_CHIPNAME}.dap -ap-num 0

# Default target is A53 core 0
targets $_TARGETNAME.0
