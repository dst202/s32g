#
# Configuration file for NXP S32G family of SoCs (Core 0)
#

# Set chip name and cores
if { [info exists CHIPNAME] } {
   set  _CHIPNAME $CHIPNAME
} else {
   set  _CHIPNAME s32g
}

if { [info exists CHIPCORES] } {
    set _cores $CHIPCORES
} else {
    set _cores 1
}

# CoreSight Debug Access Port
if { [info exists DAP_TAPID] } {
        set _DAP_TAPID $DAP_TAPID
} else {
        set _DAP_TAPID 0x2830101d
}

proc CONST { key } {
	array set constant {
		IDCODE		0x00
		SJC_DPACC	0xfa
		SJC_APACC	0xfb
		SJC_IDCODE	0xfe
		SJC_BYPASS	0xff
	}
	return $constant($key)
}

proc unlock_sequence {sjc} {
    # Step 1: Select-IR-Scan and Shift-IR 0x90 0x01
    irscan $sjc 0x90 -endstate IRPAUSE
    drscan $sjc 32 0x00000001 -endstate DRPAUSE
    runtest 100

    # Step 2: Select-IR-Scan and Shift-IR 0x02 0x01
    irscan $sjc 0x02 -endstate IRPAUSE
    drscan $sjc 32 0x00000001 -endstate DRPAUSE
    runtest 100

    # Step 3: Select-DR-Scan and Shift-DR 0x00000000 0x4E68B27D
    drscan $sjc 32 0x4E68B27D -endstate DRPAUSE
    runtest 100

    # Step 4: Select-IR-Scan and Shift-IR 0x0E 0x01
    irscan $sjc 0x0E -endstate IRPAUSE
    drscan $sjc 32 0x00000001 -endstate DRPAUSE
    runtest 100

    # Step 5: Select-DR-Scan and Shift-DR with 256-bit Password (split into 8 chunks)
    drscan $sjc 32 0x00000000 -endstate DRPAUSE
    drscan $sjc 32 0x00000000 -endstate DRPAUSE
    drscan $sjc 32 0x00000000 -endstate DRPAUSE
    drscan $sjc 32 0x00000000 -endstate DRPAUSE
    drscan $sjc 32 0xDEFC0F2E -endstate DRPAUSE
    drscan $sjc 32 0xB399F616 -endstate DRPAUSE
    drscan $sjc 32 0xBCC50C7E -endstate DRPAUSE
    drscan $sjc 32 0x17AE4E0B -endstate DRPAUSE
    runtest 100
}

# The DAP tap
jtag newtap $_CHIPNAME sjc -irlen 8 -ircapture 0x01 -irmask 0xff \
        -expected-id 0x2830101d

# Unlock the device before initializing the scan chain
unlock_sequence $_CHIPNAME.sjc

# Initialize the scan chain
scan_chain

# This is just to help display the actual IDCODE value so we
# know we're talking to the right DAP.
proc moo {sjc} {
	irscan $sjc [CONST SJC_IDCODE] -endstate IRPAUSE
	set blah 0x[drscan $sjc 32 0 -endstate DRPAUSE]
	echo "Real IDCODE: $blah"
	runtest 10
}

jtag configure $_CHIPNAME.sjc -event setup \
	"moo $_CHIPNAME.sjc"

dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.sjc

set _TARGETNAME $_CHIPNAME.a53
set _CTINAME $_CHIPNAME.cti

set DBGBASE {0x80410000 0x80510000 0x80810000 0x80910000}
set CTIBASE {0x80420000 0x80520000 0x80820000 0x80920000}

set _cores 1
for { set _core 0 } { $_core < $_cores } { incr _core } {

    cti create $_CTINAME.$_core -dap $_CHIPNAME.dap -ap-num 1 \
        -ctibase [lindex $CTIBASE $_core]

    set _command "target create $_TARGETNAME.$_core aarch64 -dap $_CHIPNAME.dap \
        -dbgbase [lindex $DBGBASE $_core] -cti $_CTINAME.$_core"

    if { $_core != 0 } {
        # non-boot core examination may fail
        set _smp_command "$_smp_command $_TARGETNAME.$_core"
    } else {
        set _smp_command "target smp $_TARGETNAME.$_core -defer-examine"
    }

    eval $_command
}

eval $_smp_command

# Declare the auxiliary Cortex-M4 core on AP #4
target create ${_CHIPNAME}.m4 cortex_m -dap $_CHIPNAME.dap -ap-num 4
