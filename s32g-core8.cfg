#
# Configuration file for NXP S32G family of SoCs
#

# Set the chip name if not already set
if { [info exists CHIPNAME] } {
    set _CHIPNAME $CHIPNAME
} else {
    set _CHIPNAME s32g
}

# Set the number of cores if not already set
if { [info exists CHIPCORES] } {
    set _cores $CHIPCORES
} else {
    set _cores 1
}

# Set the DAP TAP ID if not already set
if { [info exists DAP_TAPID] } {
    set _DAP_TAPID $DAP_TAPID
} else {
    set _DAP_TAPID 0x5ba00477
#        set _DAP_TAPID 0x0830101d
}

# Define some constants for IR scan values
proc CONST { key } {
    array set constant {
        IDCODE      0x00
        SJC_DPACC   0xfa
        SJC_APACC   0xfb
        SJC_IDCODE  0xfe
        SJC_BYPASS  0xff
    }
    return $constant($key)
}

# Procedure to bypass the SJC
proc bypass {sjc} {
    irscan $sjc [CONST SJC_BYPASS] -endstate RUN/IDLE
    runtest 10
}

# Procedure to read the IDCODE and display it
proc moo {sjc} {
    # Read and display the IDCODE
    irscan $sjc [CONST SJC_IDCODE] -endstate IRPAUSE
    set blah 0x[drscan $sjc 32 0 -endstate DRPAUSE]
    echo "Real IDCODE: $blah"
    runtest 10

}
proc unlock {sjc} {
 # Perform the unlock sequence

    # Step 1: Select-IR-Scan and Shift-IR 0x90 0x01
    irscan $sjc 0x90 -endstate IRPAUSE
    drscan $sjc 32 0x00000001 -endstate DRPAUSE
    runtest 10

    # Step 2: Select-IR-Scan and Shift-IR 0x02 0x01
    irscan $sjc 0x02 -endstate IRPAUSE
    drscan $sjc 32 0x00000001 -endstate DRPAUSE
    runtest 10

    # Step 3: Select-DR-Scan and Shift-DR 0x00000000 0x4E68B27D
    drscan $sjc 32 0x00000000 -endstate DRPAUSE
    drscan $sjc 32 0x4E68B27D -endstate DRPAUSE
    runtest 10

    # Step 4: Select-IR-Scan and Shift-IR 0x0E 0x01
    irscan $sjc 0x0E -endstate IRPAUSE
    drscan $sjc 32 0x00000001 -endstate DRPAUSE
    runtest 10

    # Step 5: Select-DR-Scan and Shift-DR with 256-bit Password (split into 8 chunks)
    drscan $sjc 32 0x00000000 -endstate DRPAUSE
    drscan $sjc 32 0x00000000 -endstate DRPAUSE
    drscan $sjc 32 0x00000000 -endstate DRPAUSE
    drscan $sjc 32 0x00000000 -endstate DRPAUSE
    drscan $sjc 32 0xefc0f2eb -endstate DRPAUSE
    drscan $sjc 32 0x399f616b -endstate DRPAUSE
    drscan $sjc 32 0xcc50c7e1 -endstate DRPAUSE
    drscan $sjc 32 0x7ae4eob3 -endstate DRPAUSE

    # Finish with a RUN/IDLE state
    #pathmove DRPAUSE DREXIT1 DRPAUSE DREXIT2 DRUPDATE RUN/IDLE
    runtest 10

    echo "Unlock sequence complete"
}

# JTAG tap for the S32G with the correct expected ID
jtag newtap $_CHIPNAME sjc -irlen 8 -ircapture 0x01 -irmask 0xff -expected-id 0x2830101d

# Configure the SJC with the setup event
jtag configure $_CHIPNAME.sjc -event setup "moo $_CHIPNAME.sjc"
jtag configure $_CHIPNAME.sjc -event setup "unlock $_CHIPNAME.sjc"

proc init_targets {} {
scan_chain

dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.sjc

set _TARGETNAME $_CHIPNAME.a53
set _CTINAME $_CHIPNAME.cti

set DBGBASE {0x80410000 0x80510000 0x80810000 0x80910000}
set CTIBASE {0x80420000 0x80520000 0x80820000 0x80920000}

set _cores 1
for { set _core 0 } { $_core < $_cores } { incr _core } {

    cti create $_CTINAME.$_core -dap $_CHIPNAME.dap -ap-num 1 \
        -ctibase [lindex $CTIBASE $_core]

    set _command "target create $_TARGETNAME.$_core aarch64 -dap $_CHIPNAME.dap \
        -dbgbase [lindex $DBGBASE $_core] -cti $_CTINAME.$_core"

    if { $_core != 0 } {
        # non-boot core examination may fail
#        set _command "$_command -defer-examine"
        set _smp_command "$_smp_command $_TARGETNAME.$_core"
    } else {
        set _smp_command "target smp $_TARGETNAME.$_core -defer-examine"
    }

    eval $_command
}

eval $_smp_command

# declare the auxiliary Cortex-M4 core on AP #4
target create ${_CHIPNAME}.m4 cortex_m -dap ${_CHIPNAME}.dap -ap-num 4 \
               -defer-examine

# AHB-AP for direct access to soc bus
target create ${_CHIPNAME}.ahb mem_ap -dap ${_CHIPNAME}.dap -ap-num 0

# default target is A53 core 0
targets $_TARGETNAME.0
echo "p2"

}
