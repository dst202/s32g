#
# configuration file for NXP S32G family of SoCs
#
if { [info exists CHIPNAME] } {
   set  _CHIPNAME $CHIPNAME
} else {
   set  _CHIPNAME s32g
}

if { [info exists CHIPCORES] } {
    set _cores $CHIPCORES
} else {
    set _cores 1
}

# CoreSight Debug Access Port
if { [info exists DAP_TAPID] } {
        set _DAP_TAPID $DAP_TAPID
} else {
        set _DAP_TAPID 0x5ba00477
#        set _DAP_TAPID 0x0830101d
}

proc CONST { key } {
	array set constant {
		IDCODE		0x00
		SJC_DPACC	0xfa
		SJC_APACC	0xfb
		SJC_IDCODE	0xfe
		SJC_BYPASS	0xff
	}
	return $constant($key)
}

proc bypass {sjc} {
	irscan $sjc [CONST SJC_BYPASS] -enstate RUN/IDLE
	runtest 10
}

proc moo {sjc} {
	irscan $sjc [CONST SJC_IDCODE] -endstate IRPAUSE
	set blah 0x[drscan $sjc 32 0 -endstate DRPAUSE]
	echo "Real IDCODE: $blah"
	runtest 10
}

scan_chain

# the DAP tap
# The S32G uses an NXP JTAG controller. The input register size
# is actually 8 bits. The ARM JTAG registers are are present but
# they have 4 leading 1 bits in front of them (meaning IDCODE
# is 0xFE instead of 0xE). We need to patch the OpenOCD code
# to deal with this, since there's no way to specify a
# prefix from the config file. Fortunately the same patched
# binary will still work with other devices.

jtag newtap $_CHIPNAME sjc -irlen 8 -ircapture 0x01 -irmask 0xff \
        -expected-id 0x0830101d

# This is just to help display the actual IDCODE value so we
# know we're talking to the right DAP.

jtag configure $_CHIPNAME.sjc -event setup \
	"moo $_CHIPNAME.sjc"

dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.sjc

set _TARGETNAME $_CHIPNAME.a53
set _CTINAME $_CHIPNAME.cti

set DBGBASE {0x80410000 0x80510000 0x80810000 0x80910000}
set CTIBASE {0x80420000 0x80520000 0x80820000 0x80920000}

set _cores 1
for { set _core 0 } { $_core < $_cores } { incr _core } {

    cti create $_CTINAME.$_core -dap $_CHIPNAME.dap -ap-num 1 \
        -ctibase [lindex $CTIBASE $_core]

    set _command "target create $_TARGETNAME.$_core aarch64 -dap $_CHIPNAME.dap \
        -dbgbase [lindex $DBGBASE $_core] -cti $_CTINAME.$_core"

    if { $_core != 0 } {
        # non-boot core examination may fail
#        set _command "$_command -defer-examine"
        set _smp_command "$_smp_command $_TARGETNAME.$_core"
    } else {
        set _smp_command "target smp $_TARGETNAME.$_core -defer-examine"
    }

    eval $_command
}

eval $_smp_command

# declare the auxiliary Cortex-M4 core on AP #4
target create ${_CHIPNAME}.m4 cortex_m -dap ${_CHIPNAME}.dap -ap-num 4 \
               -defer-examine

# AHB-AP for direct access to soc bus
target create ${_CHIPNAME}.ahb mem_ap -dap ${_CHIPNAME}.dap -ap-num 0

# default target is A53 core 0
targets $_TARGETNAME.0
