#This config file is for s32g to work with uncensoring its password 
# configuration file for NXP S32G family of SoCs
#
if { [info exists CHIPNAME] } {
   set  _CHIPNAME $CHIPNAME
} else {
   set  _CHIPNAME s32g
}

if { [info exists CHIPCORES] } {
    set _cores $CHIPCORES
} else {
    set _cores 1
}

# CoreSight Debug Access Port
if { [info exists DAP_TAPID] } {
        set _DAP_TAPID $DAP_TAPID
} else {
        set _DAP_TAPID 0x2830101d
}

proc CONST { key } {
	array set constant {
		IDCODE		0x00
		SJC_DPACC	0xfa
		SJC_APACC	0xfb
		SJC_IDCODE	0xfe
		SJC_BYPASS	0xff
        SJC_SJDC    0x90


    
	}
	return $constant($key)
}

proc bypass {sjc} {
	irscan $sjc [CONST SJC_BYPASS] -enstate RUN/IDLE
	runtest 10
}

proc moo {sjc} {

    # Read ID code
	irscan $sjc [CONST SJC_IDCODE] -endstate IRPAUSE
	set blah 0x[drscan $sjc 32 0 -endstate DRPAUSE]
	echo "Real IDCODE: $blah"
    runtest 10

    # Read JTAGC ID code
    irscan $sjc 0x00 -endstate IRPAUSE
	set blah 0x[drscan $sjc 32 0 -endstate DRPAUSE]
	echo "JTAGC IDCODE: $blah"
    runtest 10
    # Check to see if bits are  shifting
    irscan $sjc 0xfa
    set blah 0x[drscan $sjc 32 4]
	echo "Empty DRSCAN 0: $blah"

	# Step 1: Select-IR-Scan and Shift-IR 0x90 0x01
    #This is security JDC register 
    irscan $sjc 0x90
    pathmove RUN/IDLE DRSELECT DRCAPTURE DREXIT1 DRUPDATE RUN/IDLE

    # Here the tap is changed
    # Warning: IR size is now 5

    # Step 2: Select-IR-Scan and Shift-IR 0x02 and we get out 0x01
    # However 0x2f instead of 0x03 because of new IR size is 5
    irscan $sjc 0x2f -endstate IRSHIFT
    pathmove IRSHIFT IREXIT1 IRUPDATE RUN/IDLE

    # Step 3 : DR SCAN 32 bits for password
    set blah 0x[drscan $sjc 31 0 -endstate DRSHIFT]
	echo "Empty DRSCAN 1: $blah"
    pathmove DRSHIFT DREXIT1 DRUPDATE RUN/IDLE

    # Step 4: Select-IR-Scan and Shift-IR 0x0E  and we get out 0x01
    # However 0x77 instead of 0x0E because of new IR size is 5
    irscan $sjc 0x77

    # Step 5: Give the password
    set blah 0x[drscan $sjc 256 0x00000000000000000000000000000000EFC0F2EB399F616BCC50C7E17AE4E0B3 -endstate RUN/IDLE]
    echo "Password DRSCAN: $blah"
    pathmove RUN/IDLE DRSELECT DRCAPTURE DREXIT1 DRPAUSE DREXIT2 DRUPDATE RUN/IDLE



    # Lauterbach sequence starts here
    set blah 0x[drscan $sjc 35 0x280000102 -endstate RUN/IDLE]
    set blah 0x[drscan $sjc 35 0x018000004 -endstate RUN/IDLE]
	echo "DRSCAN lauter: $blah"

    irscan $sjc 0xfb

    set blah 0x[drscan $sjc 35 0x218000090 -endstate RUN/IDLE]
	echo "DRSCAN pre 1: $blah"
    set blah 0x[drscan $sjc 35 0x700076802 -endstate RUN/IDLE]
	echo "DRSCAN pre 2: $blah"
    set blah 0x[drscan $sjc 35 0x000000007 -endstate RUN/IDLE]
	echo "DRSCAN pre 3: $blah"

    irscan $sjc 0xfa

    set blah 0x[drscan $sjc 35 0x00000003 -endstate RUN/IDLE]
	echo "DRSCAN: $blah"




    # Step 6: the adapter is asserted RESET and deasserted 
    #adapter assert trst
    #adapter deassert trst


}

scan_chain

# the DAP tap
# The S32G uses an NXP JTAG controller. The input register size
# is actually 8 bits. The ARM JTAG registers are are present but
# they have 4 leading 1 bits in front of them (meaning IDCODE
# is 0xFE instead of 0xE). We need to patch the OpenOCD code
# to deal with this, since there's no way to specify a
# prefix from the config file. Fortunately the same patched
# binary will still work with other devices.

jtag newtap $_CHIPNAME sjc -irlen 8 -ircapture 0x01 -irmask 0xff \
        -expected-id 0x2830101d 
# This is just to help display the actual IDCODE value so we
# know we're talking to the right DAP.

jtag configure $_CHIPNAME.sjc -event setup \
	"moo $_CHIPNAME.sjc"

dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.sjc 

set _TARGETNAME $_CHIPNAME.a53
set _CTINAME $_CHIPNAME.cti

set DBGBASE {0x80410000 0x80510000 0x80810000 0x80910000}
set CTIBASE {0x80420000 0x80520000 0x80820000 0x80920000}

set _cores 1
for { set _core 0 } { $_core < $_cores } { incr _core } {

    cti create $_CTINAME.$_core -dap $_CHIPNAME.dap -ap-num 1 \
        -ctibase [lindex $CTIBASE $_core]

    set _command "target create $_TARGETNAME.$_core aarch64 -dap $_CHIPNAME.dap \
        -dbgbase [lindex $DBGBASE $_core] -cti $_CTINAME.$_core"

    if { $_core != 0 } {
        # non-boot core examination may fail
#        set _command "$_command -defer-examine"
        set _smp_command "$_smp_command $_TARGETNAME.$_core"
    } else {
        set _smp_command "target smp $_TARGETNAME.$_core -defer-examine"
    }

    eval $_command
}

eval $_smp_command

# declare the auxiliary Cortex-M4 core on AP #4
target create ${_CHIPNAME}.m4 cortex_m -dap ${_CHIPNAME}.dap -ap-num 4 \

#target create ${_CHIPNAME}.a53 -dap ${_CHIPNAME}.dap -dbgbase 0x80410000 -cti $_CHIPNAME.cti -ap-num 4 \

# AHB-AP for direct access to soc bus
target create ${_CHIPNAME}.ahb mem_ap -dap ${_CHIPNAME}.dap -ap-num 0 \

# default target is A53 core 0
targets smp $_TARGETNAME.0

init
s32g.m4 mdw phys 0xe000ed00
